<?php
/**
 * @file
 * Provides OAuth2 mailer functionality.
 */

/**
 * Get the class OAuth2\MailerClient.
 */
module_load_include('inc', 'oauth2_mailer', 'classes/oauth2_mailer');

/**
 * Implements hook_help().
 */
function oauth2_mailer_help($path, $arg) {
  switch ($path) {
    case 'admin/help#oauth2_mailer':
      $output = file_get_contents(drupal_get_path('module', 'oauth2_mailer') . '/README.txt');
      return  '<pre>' . check_plain($output) . '</pre>';
  }
}

/**
 * Implements hook_menu().
 */
function oauth2_mailer_menu() {
  $items['admin/config/services/oauth2_mailer'] = array(
    'title' => 'Oauth2 Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments' => array('oauth2_mailer_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'oauth2_mailer.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/services/oauth2_mailer/provider/%oauth2_mailer_provider'] = array(
    'title callback' => 'oauth2_mailer_get_provider_name',
    'title arguments' => array(5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oauth2_mailer_admin_provider_settings', 5),
    'access arguments' => array('administer site configuration'),
    'file' => 'oauth2_mailer.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['mailer/compose'] = array(
    'title' => 'Oauth2 Settings',
    'page callback' => 'oauth2_mailer_compose',
    'access arguments' => array('access oauth2_mailer'),
    'type' => MENU_CALLBACK,
  );
  $items['mailer/window/%'] = array(
    'page callback' => 'oauth2_mailer_window',
    'page arguments' => array(2),
    'access arguments' => array('access oauth2_mailer'),
    'file' => 'oauth2_mailer.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function oauth2_mailer_libraries_info() {
  return array(
    'phpmailer' => array(
      'name' => 'PHPMailer',
      'vendor url' => 'https://github.com/PHPMailer',
      'download url' => 'https://github.com/PHPMailer/PHPMailer',
      'version arguments' => array(
        'file' => 'VERSION',
        'pattern' => '/([0-9\.]+)/',
        'lines' => 1,
      ),
      'files' => array(
        'php' => array(
          'class.phpmailer.php',
          'class.smtp.php',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function oauth2_mailer_permission() {
  return array(
    'access oauth2_mailer' => array(
      'title' => t('Access oauth2 mailer'),
      'description' => t('Access Sent emails'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function oauth2_mailer_theme() {
  return array(
    'oauth2_mailer' => array(
      'template' => 'theme/templates/oauth2_mailer',
      'render element' => 'form',
    ),
    'oauth2_mailer_admin_settings_providers_table' => array(
      'file' => 'oauth2_mailer.admin.inc',
      'render element' => 'form',
    ),
    'oauth2_mailer_provider_icon' => array(
      'variables' => array(
        'provider_id' => NULL,
        'provider_name' => NULL,
      ),
      'template' => 'theme/templates/oauth2_mailer_provider_icon',
      'file' => 'oauth2_mailer.theme.inc',
    ),
  );
}

/**
 * Implements hook_page_alter().
 */
function oauth2_mailer_page_build(&$page) {
  if (user_access('access oauth2_mailer')) {
    drupal_add_library('system', 'drupal.ajax');
    drupal_add_library('system', 'jquery.cookie');
    $page['page_bottom']['mailer'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => drupal_html_id('mailer'),
      ),
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'oauth2_mailer') . '/theme/mailer.js',
        ),
      ),
    );
    if (isset($_COOKIE['isShowedMailerWindow'])) {
      $page['page_bottom']['mailer']['#theme'] = 'oauth2_mailer';
      $page['page_bottom']['mailer']['#attached']['css'][] = drupal_get_path('module', 'oauth2_mailer') . '/theme/mailer.css';
    }
  }
}

/**
 * Implements hook_block_info().
 */
function oauth2_mailer_block_info() {
  $blocks = array();
  $blocks['oauth2_mailer_block'] = array(
    'info' => t('Oauth2 mailer'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function oauth2_mailer_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'oauth2_mailer_block':
      $block['subject'] = t('Compose email message');
      $block['content'] = oauth2_mailer_block();
      break;
  }
  return $block;
}

/**
 * Page callback: Displays message form.
 */
function oauth2_mailer_compose() {

  setcookie('isShowedMailerWindow', '1', REQUEST_TIME + 60 * 60, '/');

  if (!isset($_POST['js']) || $_POST['js'] != 'true') {
    drupal_goto();
  }

  $commands = array();

  drupal_add_css(drupal_get_path('module', 'oauth2_mailer') . '/theme/mailer.css');

  $content = theme('oauth2_mailer');
  $commands[] = ajax_command_html('#mailer', $content);
  $page = array('#type' => 'ajax', '#commands' => $commands);

  ajax_deliver($page);
  drupal_exit();
}

/**
 * Processes theme variables.
 *
 * @param array $variables
 *   An associative array.
 */
function oauth2_mailer_preprocess_oauth2_mailer(&$variables = array()) {
  $client = new OAuth2\MailerClient();
  if ($client->getTokenInfo()) {
    $variables['content'] = drupal_get_form('oauth2_mailer_message_form');
    return;
  }
  elseif ($client->getRefreshToken() || isset($_GET['code'])) {
    $client->getAccessToken();
  }

  $variables['content'] = drupal_get_form('oauth2_mailer_authentication_form');
}

/**
 * Functionality for oauth2 authentication and send emails.
 */
function oauth2_mailer_block() {
  $client = new OAuth2\MailerClient();
  if ($client->getTokenInfo()) {
    return drupal_get_form('oauth2_mailer_message_form');
  }
  elseif ($client->getRefreshToken() || isset($_GET['code'])) {
    $client->getAccessToken();
  }

  return drupal_get_form('oauth2_mailer_authentication_form');
}

/**
 * Get message form.
 */
function oauth2_mailer_message_form($form, &$form_state) {

  $form['to'] = array(
    '#title' => t('Address'),
    '#title_display' => 'invisible',
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' => 20,
    '#attributes' => array(
      'placeholder' => t('To'),
    ),
  );

  $form['subject'] = array(
    '#title' => t('Subject'),
    '#title_display' => 'invisible',
    '#type' => 'textfield',
    '#size' => 20,
    '#attributes' => array(
      'placeholder' => t('Subject'),
    ),
  );

  $form['body'] = array(
    '#title' => t('Message'),
    '#title_display' => 'invisible',
    '#type' => 'textarea',
    '#resizable' => FALSE,
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => t('Message'),
    ),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'oauth2_mailer_ajax_submit_callback',
      'wrapper' => 'mailer-messages',
    ),
    '#value' => t('Send mail'),
    '#weight' => 40,
  );

  return $form;
}

/**
 * Implements validation for 'oauth2_mailer_message_form' form.
 */
function oauth2_mailer_message_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['to']) && !valid_email_address($form_state['values']['to'])) {
    form_set_error($form_state['values']['to'], t('The email address is not valid'));
  }
}
/**
 * Implements submit for 'oauth2_mailer_message_form' form.
 */
function oauth2_mailer_message_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $client = new OAuth2\MailerClient();
  $client->sendMail($values['to'], $values['subject'], $values['body']);
}

/**
 * Form submission handler for oauth2_mailer_message_form().
 */
function oauth2_mailer_ajax_submit_callback($form, &$form_state) {
  $commands = array();
  $form_id = '#' . $form['#id'];

  if (!empty($form_state['executed'])) {
    // We destroy $form_state['input'] for clear form fields
    // after submit form via ajax.
    $form_state['input'] = array();
    $form = drupal_build_form('oauth2_mailer_message_form', $form_state);
  }

  $content = render($form);
  $commands[] = ajax_command_replace($form_id, $content);
  $form_id = '#' . $form['#id'];
  $commands[] = ajax_command_prepend($form_id, '<div class="mailer-messages">' . theme('status_messages') . '</div>');
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Get authentication form.
 */
function oauth2_mailer_authentication_form($form, &$form_state) {
  $client = new OAuth2\MailerClient();

  $form['#attributes']['class'][] = 'authentication-form';

  if ($provider = $client->getClient()) {
    $form['url'] = array('#type' => 'hidden', '#value' => 'mailer/window/' . $provider->name);
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['get_access'] = array(
    '#type' => 'submit',
    '#value' => t('Authentication'),
  );

  return $form;
}

/**
 * Get oauth2 access token.
 */
function oauth2_mailer_authentication_form_submit($form, &$form_state) {
  $client = new OAuth2\MailerClient();
  if (!$client->getAccessToken()) {
    drupal_set_message(t('Oops... Something went wrong.'), 'error');
  }
}

/**
 * Builds an OAuth2 authentication string.
 */
function oauth2_mailer_construct_auth_string($email, $access_token) {
  return base64_encode("user=$email\1auth=Bearer $access_token\1\1");
}

/**
 * Send a message via SMTP.
 *
 * Using SASL XOAUTH2 mechanism which allows clients to send
 * OAuth 2.0 access tokens to the server.
 */
function oauth2_mailer_xoauth_send_mail($to, $subject, $body, $config, $from) {
  $library = libraries_load('phpmailer');

  if (!empty($library['loaded'])) {
    $mail = new Oauth2MailerPHPMailer();

    $mail->IsSMTP();
    $mail->XOAUTHAuth = TRUE;
    $mail->AuthToken = $config['xoauth2_request'];
    $mail->SMTPSecure = $config['ssl'];
    $mail->Host = $config['host'];
    $mail->Port = $config['port'];

    $mail->AddAddress($to);
    $mail->SetFrom($from);
    if ($subject) {
      $mail->Subject = $subject;
    }

    $mail->MsgHTML($body);

    if ($mail->Send()) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Custom ajax command.
 */
function oauth2_mailer_ajax_command_window($url, $title) {
  ctools_add_js('ajax-responder');
  return array(
    'command' => 'window',
    'url' => url($url),
    'title' => $title,
  );
}

/**
 * Get available provider list.
 */
function oauth2_mailer_providers_list() {
  $providers = &drupal_static(__FUNCTION__, NULL);

  if (!isset($providers)) {
    $raw_providers = array(
      // Core providers.
      'Google' => t('Google'),
    );
    foreach (oauth2_mailer_providers('model') as $name => $file) {
      if (!array_key_exists($name, $raw_providers)) {
        $raw_providers[$name] = $name;
      }
    }

    $providers = array();
    $weights = array();

    foreach ($raw_providers as $provider_id => $provider_name) {
      $weights[$provider_id] = variable_get('oauth2_mailer_provider_' . $provider_id . '_weight', 50);
    }
    asort($weights);

    foreach ($weights as $provider_id => $weight) {
      $providers[$provider_id] = $raw_providers[$provider_id];
    }
  }

  return $providers;
}


/**
 * Returns available providers files by type.
 */
function oauth2_mailer_providers($type = '') {

  switch ($type) {
    case 'style':
      $extension = 'css';
      break;

    case 'model':
      $extension = 'php';
      break;

    case 'settings':
      $extension = 'inc';
      break;

    default:
      $extension = '';
      break;

  }

  if (!$extension) {
    return;
  }

  $cache_hash = 'oauth2_mailer_providers_' . $type;
  $cache = cache_get($cache_hash);
  if (!empty($cache->data)) {
    $files = $cache->data;
  }
  else {
    $files = file_scan_directory(drupal_get_path('module', 'oauth2_mailer') . '/providers', "/\.$extension$/", array('key' => 'name'));
    cache_set($cache_hash, $files, 'cache', CACHE_TEMPORARY);
  }

  return $files;
}

/**
 * Include provider files.
 */
function oauth2_mailer_provider_include($providers = array(), $provider_id = '') {
  if (!isset($providers["$provider_id"])) {
    return FALSE;
  }
  $provider = $providers["$provider_id"];
  if (isset($provider->uri) && $provider->uri) {
    include_once DRUPAL_ROOT . '/' . $provider->uri;
    return TRUE;
  }
}

/**
 * Returns auth provider name by provider ID.
 */
function oauth2_mailer_get_provider_name($provider_id) {
  $providers = oauth2_mailer_providers_list();
  return isset($providers[$provider_id]) ? $providers[$provider_id] : NULL;
}

/**
 * Menu argument loader.
 */
function oauth2_mailer_provider_load($requested_provider_id) {
  foreach (array_keys(oauth2_mailer_providers_list()) as $provider_id) {
    if (strtolower($requested_provider_id) === strtolower($provider_id)) {
      return $provider_id;
    }
  }
  return $requested_provider_id;
}

/**
 * Load metadata for a single provider without loading all providers.
 */
function oauth2_mailer_get_provider($name) {
  ctools_include('plugins');
  return ctools_get_plugins('oauth2_mailer', 'provider', $name);
}
